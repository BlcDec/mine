#include<iostream>
#include<cstring>
using namespace std;
class SORTING_ALGORITHM_ANALYSIS
{
private:
	int n;
	int pending_teatment_array[1000];
	int compear_frequency;
	int move_frequency;
public:
	void Get_array();
	void Insert_sort();
	void Shell_sort();
	void plan();
};
void SORTING_ALGORITHM_ANALYSIS::Get_array()
{
	int temp;
	int i = 1;
	while (cin >> temp&&temp != -1)
	{
		pending_teatment_array[i] = temp;
		i++;
	}
	n = i;
}
void SORTING_ALGORITHM_ANALYSIS::Insert_sort()
{
	compear_frequency = 0;
	move_frequency = 0;
	int *array =new int[n];
	memcpy(array, pending_teatment_array, 4 * n);
	for (int i = 2;i < n;i++)//n-1次比较
	{
		if (array[i] < array[i - 1])//若位置合适直接放下
		{
			int j;
			array[0] = array[i];
			move_frequency++;
			compear_frequency++;
			for (j = i - 1;array[0] < array[j];j--)//j作为哨兵，若无则j=0，必跳出
			{
				array[j + 1] = array[j];
				compear_frequency++;
				move_frequency++;
			}
			array[j + 1] = array[0];//放入
			move_frequency++;
		}
		compear_frequency++;
	}
	for (int i = 1;i < n;i++)
	{
		cout << array[i] << " ";
	}
	cout << endl;
	cout << compear_frequency << " " << move_frequency<<" 插入排序" << endl;

}
void SORTING_ALGORITHM_ANALYSIS::Shell_sort()
{
	compear_frequency = 0;
	move_frequency = 0;
	int *array = new int[n];//0作为暂存单元
	memcpy(array, pending_teatment_array, 4 * n);
	for (int i = 1;i < n;i++)
	{
		cout << array[i] << " ";
	}
	cout << endl;
	for (int d = 2;d >= 1;d = d / 2)//以增量为d进行直接插入排序
	{
			for (int i = d + 1;i < n;i++)
			{
					int j;
					array[0] = array[i];//带插入元素暂存
					move_frequency++;
					//compear_frequency++;
					for (j = i - d;j > 0 && array[0] < array[j];j = j - d)
					{
						array[j + d] = array[j];//后移d的元素
						compear_frequency++;
						move_frequency++;
					}
					array[j + d] = array[0];
					move_frequency++;
			}
	}
	for (int i = 1;i < n;i++)
	{
		cout << array[i] << " ";
	}
	cout << endl;
	cout << compear_frequency << " " << move_frequency << "  shell sort" << endl;
}
void SORTING_ALGORITHM_ANALYSIS::plan()
{
	Get_array();
	Insert_sort();
	Shell_sort();
}
int main()
{
	SORTING_ALGORITHM_ANALYSIS TEST;
	TEST.plan();
}
